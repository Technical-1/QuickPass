name: "Build Rust CLI -> .app -> .dmg -> Notarize"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  # Or if you want auto-release on tags, add:
  #   tags:
  #     - 'v*.*.*'

jobs:
  build-macos-dmg:
    name: "Build, .app, Sign & Notarize macOS"
    runs-on: macos-latest

    steps:
      # 1) Check out code
      - name: Check out code
        uses: actions/checkout@v3

      # 2) Install Rust
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable

      # 3) Build CLI in release mode
      - name: Cargo build
        run: cargo build --release

      # 4) Import Developer ID certificate (from secrets)
      - name: Install Code Signing Certificate
        run: |
          echo "$APPLE_CERT" | base64 --decode > signing.p12

          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain

          security import signing.p12 -k build.keychain -P "$APPLE_CERT_PASS" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
        env:
          APPLE_CERT: ${{ secrets.APPLE_CERT }}
          APPLE_CERT_PASS: ${{ secrets.APPLE_CERT_PASS }}

      # 5) Create a minimal Info.plist & build .app structure
      - name: Create .app bundle
        run: |
          mkdir -p QuickPass.app/Contents/MacOS
          # Copy compiled CLI into .app
          cp target/release/QuickPass QuickPass.app/Contents/MacOS/

          # Create minimal Info.plist via a here-doc
          cat <<EOF > QuickPass.app/Contents/Info.plist
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" 
  "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>CFBundleIdentifier</key>
  <string>com.yourdomain.QuickPass</string>
  <key>CFBundleName</key>
  <string>QuickPass</string>
  <key>CFBundleShortVersionString</key>
  <string>1.0</string>
  <key>CFBundleVersion</key>
  <string>1</string>
</dict>
</plist>
EOF


      # 6) Code sign the .app
      - name: Code Sign .app
        run: |
          codesign --deep --force --options runtime \
            --sign "Developer ID Application: Jacob Kanfer (M7SN262HK4)" \
            QuickPass.app

      # 7) Create a .dmg from the .app
      - name: Create .dmg
        run: |
          # We'll place it in target/release to keep things organized
          mv QuickPass.app target/release/
          cd target/release

          # Create folder for dmg contents if you'd like a custom layout:
          mkdir QuickPassDmgContent
          mv QuickPass.app QuickPassDmgContent/

          # Build the dmg
          hdiutil create QuickPass.dmg \
            -volname "QuickPass" \
            -srcfolder "QuickPassDmgContent" \
            -ov

      # 8) Code sign the .dmg itself
      - name: Code Sign .dmg
        run: |
          codesign --force --options runtime --deep \
            --sign "Developer ID Application: Jacob Kanfer (M7SN262HK4)" \
            target/release/QuickPass.dmg

      # 9) Notarize the .dmg
      - name: Notarize .dmg
        if: env.APPLE_APP_SPECIFIC_PASSWORD
        run: |
          cd target/release
          xcrun notarytool submit QuickPass.dmg \
            --apple-id "$APPLE_ID" \
            --team-id "$APPLE_TEAM_ID" \
            --password "$APPLE_APP_SPECIFIC_PASSWORD" \
            --wait

          # After success, staple
          xcrun stapler staple QuickPass.dmg
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}

      # 10) Upload final .dmg artifact
      - name: Upload notarized .dmg
        uses: actions/upload-artifact@v4
        with:
          name: QuickPass-macOS-dmg
          path: target/release/QuickPass.dmg
          overwrite: true
