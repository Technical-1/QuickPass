name: "QuickPass Build & Release"

on:
  push:
    tags:
      - "v*.*.*"
  

jobs:
  # ------------------------------------------------
  # (1) Build Windows & Linux
  # ------------------------------------------------
  build-windows-linux:
    name: "Build (Windows & Linux)"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable

      - name: Cargo build (release)
        run: cargo build --release

      # Upload artifact for Windows
      - name: Upload artifact (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: QuickPass-Windows
          path: target/release/QuickPass.exe
          overwrite: true

      # Upload artifact for Linux
      - name: Upload artifact (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: QuickPass-Linux
          path: target/release/QuickPass
          overwrite: true

  # ------------------------------------------------
  # (2) Build & Notarize macOS .dmg
  # ------------------------------------------------
  build-macos-dmg:
    name: "Build, .app, Notarize macOS"
    runs-on: macos-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable

      - name: Cargo build
        run: cargo build --release

      - name: Install Code Signing Certificate
        run: |
          echo "$APPLE_CERT" | base64 --decode > signing.p12
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain

          # Download & import Apple WWDR intermediate certificate
          curl -O https://www.apple.com/certificateauthority/AppleWWDRCAG3.cer
          security import AppleWWDRCAG3.cer -k build.keychain

          security import signing.p12 -k build.keychain -P "$APPLE_CERT_PASS" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
        env:
          APPLE_CERT: ${{ secrets.APPLE_CERT }}
          APPLE_CERT_PASS: ${{ secrets.APPLE_CERT_PASS }}

      - name: Create .app bundle
        run: |
          mkdir -p QuickPass.app/Contents/MacOS
          cp target/release/QuickPass QuickPass.app/Contents/MacOS/

          cp .github/workflows/Info.plist QuickPass.app/Contents/Info.plist

          mkdir -p QuickPass.app/Contents/Resources
          cp .github/workflows/icon.icns QuickPass.app/Contents/Resources/icon.icns

      - name: Code Sign .app
        run: |
          codesign --force --options runtime \
            --sign "Developer ID Application: Jacob Kanfer (M7SN262HK4)" \
            QuickPass.app

      - name: Debug Signed .app
        run: |
          codesign -dv --verbose=4 QuickPass.app
          spctl -a -vvv QuickPass.app || true

      - name: Create .dmg
        run: |
          mv QuickPass.app target/release/
          cd target/release
          mkdir QuickPassDmgContent
          mv QuickPass.app QuickPassDmgContent/
          hdiutil create QuickPass.dmg \
            -volname "QuickPass" \
            -srcfolder "QuickPassDmgContent" \
            -fs HFS+ \
            -ov

      - name: Notarize .dmg
        if: env.APPLE_APP_SPECIFIC_PASSWORD
        run: |
          cd target/release
          xcrun notarytool submit QuickPass.dmg \
            --apple-id "$APPLE_ID" \
            --team-id "$APPLE_TEAM_ID" \
            --password "$APPLE_APP_SPECIFIC_PASSWORD" \
            --wait 2>&1 | tee notarytool-submit.txt

          echo "=== Submission raw output: ==="
          cat notarytool-submit.txt

          SUBMISSION_ID=$(grep '^  id:' notarytool-submit.txt | head -n1 | sed 's/.*id: //')
          echo "Extracted SUBMISSION_ID=${SUBMISSION_ID}"

          STATUS=$(grep 'status:' notarytool-submit.txt | tail -n1 | sed 's/.*status: //')
          echo "Extracted Notary Status=$STATUS"

          if [ "$STATUS" = "Accepted" ]; then
            echo "Stapling .dmg..."
            xcrun stapler staple QuickPass.dmg
          else
            echo "Notarization invalid. Fetching logs with SUBMISSION_ID=${SUBMISSION_ID}..."
            xcrun notarytool log "$SUBMISSION_ID" \
              --apple-id "$APPLE_ID" \
              --team-id "$APPLE_TEAM_ID" \
              --password "$APPLE_APP_SPECIFIC_PASSWORD" \
              2>&1 | tee notarytool-log.txt

            echo "=== Detailed Notary Log: ==="
            cat notarytool-log.txt
            exit 1
          fi
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}

      - name: Upload notarized .dmg
        uses: actions/upload-artifact@v4
        with:
          name: QuickPass-macOS-dmg
          path: target/release/QuickPass.dmg
          overwrite: true

   # ------------------------------------------------
  # 3) Release job
  # ------------------------------------------------
  release:
    needs: [build-windows-linux, build-macos-dmg]
    runs-on: ubuntu-latest

    steps:
      - name: Download Windows
        uses: actions/download-artifact@v4
        with:
          name: QuickPass-Windows
          path: ./dist

      - name: Download Linux
        uses: actions/download-artifact@v4
        with:
          name: QuickPass-Linux
          path: ./dist

      - name: Download mac dmg
        uses: actions/download-artifact@v4
        with:
          name: QuickPass-macOS-dmg
          path: ./dist

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload Windows
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/QuickPass.exe
          asset_name: QuickPass-Windows.exe
          asset_content_type: application/octet-stream

      - name: Upload Linux
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/QuickPass
          asset_name: QuickPass-Linux
          asset_content_type: application/octet-stream

      - name: Upload mac dmg
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/QuickPass.dmg
          asset_name: QuickPass-macOS.dmg
          asset_content_type: application/octet-stream